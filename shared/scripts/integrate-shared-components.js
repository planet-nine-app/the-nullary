#!/usr/bin/env node
/**
 * Integration Script for Shared Components
 * Helps integrate shared components into Nullary applications
 */

const fs = require('fs');
const path = require('path');

/**
 * Configuration for different app types
 */
const APP_CONFIGS = {
  ninefy: {
    name: 'Ninefy',
    logoIcon: 'üõçÔ∏è',
    screens: [
      { id: 'main', label: 'üè™ Shop', title: 'Browse Products' },
      { id: 'browse', label: 'üåê Browse Base', title: 'Browse Base Products' },
      { id: 'upload', label: 'üì§ Upload', title: 'Upload Product' },
      { id: 'base', label: '‚öôÔ∏è Base', title: 'Server Management' }
    ],
    theme: 'marketplace',
    components: ['navigation', 'product-card', 'common-ui', 'base-discovery', 'theme-system']
  },
  rhapsold: {
    name: 'Rhapsold',
    logoIcon: 'üìù',
    screens: [
      { id: 'main', label: 'üìö Posts', title: 'Blog Posts' },
      { id: 'new', label: '‚úçÔ∏è New Post', title: 'Create New Post' },
      { id: 'reading', label: 'üìñ Reading', title: 'Reading Mode' },
      { id: 'base', label: '‚öôÔ∏è Base', title: 'Server Management' }
    ],
    theme: 'blog',
    components: ['navigation', 'product-card', 'common-ui', 'base-discovery', 'theme-system']
  },
  screenary: {
    name: 'Screenary',
    logoIcon: 'üåü',
    screens: [
      { id: 'feed', label: 'üè† Feed', title: 'Social Feed' },
      { id: 'discover', label: 'üîç Discover', title: 'Discover Content' },
      { id: 'create', label: '‚ûï Create', title: 'Create Post' },
      { id: 'base', label: '‚öôÔ∏è Base', title: 'Server Management' }
    ],
    theme: 'default',
    components: ['navigation', 'product-card', 'common-ui', 'base-discovery', 'theme-system']
  }
};

/**
 * Generate navigation setup code for an app
 * @param {string} appType - The app type (ninefy, rhapsold, etc.)
 * @returns {string} Generated JavaScript code
 */
function generateNavigationSetup(appType) {
  const config = APP_CONFIGS[appType];
  if (!config) {
    throw new Error(`Unknown app type: ${appType}`);
  }

  return `
/**
 * Navigation Setup for ${config.name}
 * Generated by integrate-shared-components.js
 */

import { createNavigationHUD, createNavigationManager } from '../../shared/components/navigation.js';
import { createThemeManager, THEMES } from '../../shared/utils/theme-system.js';
import { createLoadingSpinner, createEmptyState, showToast } from '../../shared/utils/common-ui.js';

// Initialize theme
const themeManager = createThemeManager('${config.theme}');
let currentTheme = themeManager.getCurrentTheme();

// Screen definitions
const screens = ${JSON.stringify(config.screens, null, 2)};

// Navigation manager
const navManager = createNavigationManager({
  initialScreen: 'main',
  screens,
  theme: currentTheme,
  onNavigate: (screenId) => {
    console.log(\`üß≠ Navigating to screen: \${screenId}\`);
    renderScreen(screenId);
  }
});

// Create HUD
function createApplicationHUD() {
  return createNavigationHUD({
    appName: '${config.name}',
    logoIcon: '${config.logoIcon}',
    screens,
    theme: currentTheme,
    currentScreen: navManager.getCurrentScreen(),
    onNavigate: (screenId) => navManager.navigateTo(screenId)
  });
}

// Navigation helpers
function navigateToScreen(screenId) {
  navManager.navigateTo(screenId);
}

function updateStatus(message, type = 'info') {
  navManager.updateStatus(message, type);
}

function showNotification(message, type = 'info') {
  showToast({ message, type, duration: 3000 });
}

// Theme switching
function switchTheme(themeName) {
  if (themeManager.setTheme(themeName)) {
    currentTheme = themeManager.getCurrentTheme();
    // Re-render UI with new theme
    renderCurrentScreen();
    showNotification(\`Switched to \${currentTheme.name} theme\`, 'success');
  }
}

// Screen rendering (implement based on app needs)
function renderScreen(screenId) {
  console.log(\`üé® Rendering screen: \${screenId}\`);
  
  // Clear current content
  const content = document.getElementById('app-content');
  if (content) {
    content.innerHTML = '';
    
    // Show loading while rendering
    const spinner = createLoadingSpinner({ 
      text: \`Loading \${screenId} screen...\` 
    });
    content.appendChild(spinner);
    
    // Render specific screen (implement based on app)
    setTimeout(() => {
      spinner.remove();
      renderScreenContent(screenId);
    }, 100);
  }
}

function renderCurrentScreen() {
  renderScreen(navManager.getCurrentScreen());
}

// Placeholder for screen-specific rendering
function renderScreenContent(screenId) {
  const content = document.getElementById('app-content');
  if (!content) return;
  
  switch (screenId) {
    case 'main':
      renderMainScreen(content);
      break;
    case 'browse':
      renderBrowseScreen(content);
      break;
    case 'upload':
      renderUploadScreen(content);
      break;
    case 'new':
      renderNewPostScreen(content);
      break;
    case 'reading':
      renderReadingScreen(content);
      break;
    case 'base':
      renderBaseScreen(content);
      break;
    default:
      content.innerHTML = \`
        <div style="text-align: center; padding: 40px;">
          <h2>Screen not implemented: \${screenId}</h2>
          <p>This screen needs to be implemented in your app.</p>
        </div>
      \`;
  }
}

// Screen implementations (customize for your app)
function renderMainScreen(container) {
  const emptyState = createEmptyState({
    icon: 'üè†',
    title: 'Main Screen',
    description: 'Implement your main screen content here',
    theme: currentTheme
  });
  container.appendChild(emptyState);
}

function renderBrowseScreen(container) {
  const emptyState = createEmptyState({
    icon: 'üåê',
    title: 'Browse Screen',
    description: 'Implement your browse screen content here',
    theme: currentTheme
  });
  container.appendChild(emptyState);
}

function renderUploadScreen(container) {
  const emptyState = createEmptyState({
    icon: 'üì§',
    title: 'Upload Screen',
    description: 'Implement your upload screen content here',
    theme: currentTheme
  });
  container.appendChild(emptyState);
}

function renderNewPostScreen(container) {
  const emptyState = createEmptyState({
    icon: '‚úçÔ∏è',
    title: 'New Post Screen',
    description: 'Implement your new post screen content here',
    theme: currentTheme
  });
  container.appendChild(emptyState);
}

function renderReadingScreen(container) {
  const emptyState = createEmptyState({
    icon: 'üìñ',
    title: 'Reading Screen',
    description: 'Implement your reading screen content here',
    theme: currentTheme
  });
  container.appendChild(emptyState);
}

function renderBaseScreen(container) {
  // Use the shared base screen component
  import('../../shared/screens/base-screen.js').then(({ createBaseScreen }) => {
    const baseScreen = createBaseScreen({
      title: 'Base Server Management',
      theme: currentTheme
    });
    
    baseScreen.initialize().then(() => {
      container.appendChild(baseScreen.element);
    }).catch(error => {
      console.error('Failed to initialize base screen:', error);
      const emptyState = createEmptyState({
        icon: '‚öôÔ∏è',
        title: 'Base Management Unavailable',
        description: 'Could not load base server management',
        theme: currentTheme
      });
      container.appendChild(emptyState);
    });
  });
}

// Export for use in main app
export {
  createApplicationHUD,
  navigateToScreen,
  updateStatus,
  showNotification,
  switchTheme,
  renderCurrentScreen,
  themeManager,
  navManager,
  currentTheme
};
`;
}

/**
 * Generate basic app structure
 * @param {string} appType - The app type
 * @returns {string} Generated HTML structure
 */
function generateAppStructure(appType) {
  const config = APP_CONFIGS[appType];
  
  return `
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${config.name} - The Nullary</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: var(--font-fontFamily, system-ui);
            background: var(--color-background, #fafafa);
            color: var(--color-text, #2c3e50);
            min-height: 100vh;
        }
        
        #app {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        
        #app-content {
            flex: 1;
            margin-top: 60px; /* Space for navigation HUD */
            padding: 20px;
        }
        
        .screen {
            max-width: 1200px;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div id="app">
        <!-- Navigation HUD will be inserted here -->
        <main id="app-content">
            <!-- Screen content will be rendered here -->
        </main>
    </div>
    
    <script type="module" src="main.js"></script>
</body>
</html>
`;
}

/**
 * Generate main app initialization
 * @param {string} appType - The app type
 * @returns {string} Generated JavaScript code
 */
function generateMainApp(appType) {
  const config = APP_CONFIGS[appType];
  
  return `
/**
 * ${config.name} - Main Application
 * Generated by integrate-shared-components.js
 */

// Import shared components
import { 
  createApplicationHUD, 
  navigateToScreen, 
  updateStatus, 
  showNotification,
  renderCurrentScreen,
  themeManager 
} from './navigation-setup.js';

// Import environment configuration
import { initializeEnvironment, getEnvironmentConfig, getServiceUrl } from '../../shared/services/environment-config.js';

// Initialize app
async function initializeApp() {
  try {
    console.log('üöÄ Initializing ${config.name}...');
    
    // Initialize environment
    await initializeEnvironment();
    const envConfig = getEnvironmentConfig();
    console.log('üåç Environment:', envConfig.env);
    
    // Create and mount HUD
    const hud = createApplicationHUD();
    document.body.insertBefore(hud, document.body.firstChild);
    
    // Initialize theme system CSS
    import('../../shared/utils/theme-system.js').then(({ initializeThemeSystem }) => {
      initializeThemeSystem();
    });
    
    // Render initial screen
    renderCurrentScreen();
    
    // Set up environment controls (for browser console)
    const appEnvControls = {
      switch: (env) => {
        localStorage.setItem('nullary-env', env);
        showNotification(\`Environment switched to: \${env}\`, 'info');
        console.log('Please refresh the page to apply environment changes');
      },
      current: () => getEnvironmentConfig().env,
      list: () => ['dev', 'test', 'local'],
      config: () => getEnvironmentConfig()
    };
    
    window.${appType}Env = appEnvControls;
    
    updateStatus('Ready', 'success');
    console.log('‚úÖ ${config.name} initialized successfully');
    
  } catch (error) {
    console.error('‚ùå Failed to initialize ${config.name}:', error);
    updateStatus('Initialization failed', 'error');
    
    // Show error notification
    showNotification('App initialization failed. Please refresh the page.', 'error');
  }
}

// Start the app
document.addEventListener('DOMContentLoaded', initializeApp);

// Handle theme changes
themeManager.onThemeChange((newTheme) => {
  console.log('üé® Theme changed to:', newTheme.name);
  updateStatus(\`Theme: \${newTheme.name}\`, 'info');
});

// Error handling
window.addEventListener('error', (event) => {
  console.error('Global error:', event.error);
  showNotification('An error occurred. Please check the console.', 'error');
});

window.addEventListener('unhandledrejection', (event) => {
  console.error('Unhandled promise rejection:', event.reason);
  showNotification('Promise rejection. Please check the console.', 'error');
});

console.log('üåå ${config.name} loaded - The Nullary ecosystem');
`;
}

/**
 * Main script execution
 */
function main() {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    console.log('Usage: node integrate-shared-components.js <app-type> [output-dir]');
    console.log('Available app types:', Object.keys(APP_CONFIGS).join(', '));
    process.exit(1);
  }
  
  const appType = args[0];
  const outputDir = args[1] || `./${appType}-integration`;
  
  if (!APP_CONFIGS[appType]) {
    console.error(`Unknown app type: ${appType}`);
    console.log('Available app types:', Object.keys(APP_CONFIGS).join(', '));
    process.exit(1);
  }
  
  console.log(`Generating integration files for ${appType}...`);
  
  // Create output directory
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }
  
  // Generate files
  const navigationSetup = generateNavigationSetup(appType);
  const appStructure = generateAppStructure(appType);
  const mainApp = generateMainApp(appType);
  
  // Write files
  fs.writeFileSync(path.join(outputDir, 'navigation-setup.js'), navigationSetup);
  fs.writeFileSync(path.join(outputDir, 'index.html'), appStructure);
  fs.writeFileSync(path.join(outputDir, 'main.js'), mainApp);
  
  console.log(`‚úÖ Integration files generated in ${outputDir}/`);
  console.log('Files created:');
  console.log('  - navigation-setup.js (Navigation and theme setup)');
  console.log('  - index.html (Basic app structure)');
  console.log('  - main.js (Main app initialization)');
  console.log('');
  console.log('Next steps:');
  console.log('1. Copy these files to your app directory');
  console.log('2. Customize screen implementations in navigation-setup.js');
  console.log('3. Add your app-specific logic and components');
  console.log('4. Test with different environments (dev/test/local)');
}

// Run if called directly
if (require.main === module) {
  main();
}

module.exports = {
  APP_CONFIGS,
  generateNavigationSetup,
  generateAppStructure,
  generateMainApp
};