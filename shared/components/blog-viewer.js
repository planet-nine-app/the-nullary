/**\n * Blog Viewer Component for The Nullary\n * Handles display of both hosted and external blog posts\n */\n\nimport { createSVGContainer, createSVGElement, generateSVGId } from '../utils/svg-utils.js';\n\n/**\n * Default blog viewer configuration\n */\nconst DEFAULT_BLOG_VIEWER_CONFIG = {\n  // Layout\n  width: '100%',\n  height: '100vh',\n  padding: 20,\n  \n  // External iframe settings\n  iframeSettings: {\n    sandbox: 'allow-scripts allow-same-origin allow-popups allow-forms',\n    allowFullscreen: true,\n    loading: 'lazy'\n  },\n  \n  // Hosted content settings\n  contentPadding: 40,\n  maxContentWidth: 800,\n  \n  // Typography\n  titleFontSize: 32,\n  metaFontSize: 14,\n  contentFontSize: 16,\n  contentLineHeight: 1.7,\n  \n  // Colors\n  backgroundColor: '#ffffff',\n  textColor: '#1a202c',\n  metaColor: '#718096',\n  linkColor: '#3182ce',\n  borderColor: '#e2e8f0',\n  \n  // Features\n  showHeader: true,\n  showMeta: true,\n  showBackButton: true,\n  enablePrintMode: true,\n  \n  className: 'blog-viewer'\n};\n\n/**\n * Create blog viewer component\n * @param {Object} blogPost - Blog post data\n * @param {Object} config - Configuration object\n * @returns {Object} Blog viewer component with methods\n */\nexport function createBlogViewer(blogPost, config = {}) {\n  const finalConfig = { ...DEFAULT_BLOG_VIEWER_CONFIG, ...config };\n  \n  // Create main container\n  const container = document.createElement('div');\n  container.className = finalConfig.className;\n  container.style.cssText = `\n    width: ${finalConfig.width};\n    height: ${finalConfig.height};\n    background: ${finalConfig.backgroundColor};\n    position: relative;\n    overflow: hidden;\n  `;\n  \n  // Viewer state\n  const viewerState = {\n    blogPost,\n    isLoading: false,\n    contentLoaded: false,\n    error: null\n  };\n  \n  // Event handlers\n  const eventHandlers = {\n    onBack: null,\n    onError: null,\n    onLoad: null\n  };\n  \n  // Create header section\n  function createHeader() {\n    if (!finalConfig.showHeader) return null;\n    \n    const header = document.createElement('div');\n    header.className = 'blog-viewer-header';\n    header.style.cssText = `\n      position: sticky;\n      top: 0;\n      z-index: 1000;\n      background: ${finalConfig.backgroundColor};\n      border-bottom: 1px solid ${finalConfig.borderColor};\n      padding: ${finalConfig.padding}px;\n      display: flex;\n      align-items: center;\n      gap: 15px;\n    `;\n    \n    // Back button\n    if (finalConfig.showBackButton) {\n      const backButton = document.createElement('button');\n      backButton.innerHTML = '← Back';\n      backButton.style.cssText = `\n        background: none;\n        border: 1px solid ${finalConfig.borderColor};\n        border-radius: 6px;\n        padding: 8px 16px;\n        cursor: pointer;\n        font-size: 14px;\n        color: ${finalConfig.textColor};\n        transition: all 0.2s ease;\n      `;\n      \n      backButton.addEventListener('mouseenter', () => {\n        backButton.style.backgroundColor = '#f7fafc';\n      });\n      \n      backButton.addEventListener('mouseleave', () => {\n        backButton.style.backgroundColor = 'transparent';\n      });\n      \n      backButton.addEventListener('click', () => {\n        if (eventHandlers.onBack) {\n          eventHandlers.onBack();\n        }\n      });\n      \n      header.appendChild(backButton);\n    }\n    \n    // Title and meta info\n    const titleSection = document.createElement('div');\n    titleSection.style.cssText = 'flex: 1;';\n    \n    const title = document.createElement('h1');\n    title.style.cssText = `\n      margin: 0 0 5px 0;\n      font-size: ${finalConfig.titleFontSize}px;\n      font-family: Georgia, serif;\n      color: ${finalConfig.textColor};\n      font-weight: bold;\n      line-height: 1.2;\n    `;\n    title.textContent = blogPost.title;\n    \n    if (finalConfig.showMeta) {\n      const meta = document.createElement('div');\n      meta.style.cssText = `\n        font-size: ${finalConfig.metaFontSize}px;\n        color: ${finalConfig.metaColor};\n        font-family: Arial, sans-serif;\n      `;\n      \n      const publishDate = new Date(blogPost.publishDate).toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n      \n      meta.textContent = `By ${blogPost.author} • ${publishDate}`;\n      \n      if (blogPost.type === 'external') {\n        meta.textContent += ' • External Link';\n      }\n      \n      titleSection.appendChild(title);\n      titleSection.appendChild(meta);\n    } else {\n      titleSection.appendChild(title);\n    }\n    \n    header.appendChild(titleSection);\n    \n    // Action buttons\n    const actions = document.createElement('div');\n    actions.style.cssText = 'display: flex; gap: 10px;';\n    \n    // Open in new tab button (for external links)\n    if (blogPost.type === 'external' && blogPost.externalUrl) {\n      const openButton = document.createElement('button');\n      openButton.innerHTML = '🔗 Open Original';\n      openButton.style.cssText = `\n        background: ${finalConfig.linkColor};\n        color: white;\n        border: none;\n        border-radius: 6px;\n        padding: 8px 16px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: all 0.2s ease;\n      `;\n      \n      openButton.addEventListener('click', () => {\n        window.open(blogPost.externalUrl, '_blank');\n      });\n      \n      actions.appendChild(openButton);\n    }\n    \n    header.appendChild(actions);\n    \n    return header;\n  }\n  \n  // Create loading indicator\n  function createLoadingIndicator() {\n    const loading = document.createElement('div');\n    loading.className = 'blog-viewer-loading';\n    loading.style.cssText = `\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      text-align: center;\n      color: ${finalConfig.metaColor};\n      font-family: Arial, sans-serif;\n    `;\n    \n    const spinner = document.createElement('div');\n    spinner.style.cssText = `\n      width: 40px;\n      height: 40px;\n      border: 3px solid ${finalConfig.borderColor};\n      border-top: 3px solid ${finalConfig.linkColor};\n      border-radius: 50%;\n      animation: spin 1s linear infinite;\n      margin: 0 auto 15px;\n    `;\n    \n    const text = document.createElement('div');\n    text.textContent = 'Loading blog post...';\n    \n    loading.appendChild(spinner);\n    loading.appendChild(text);\n    \n    // Add CSS animation\n    const style = document.createElement('style');\n    style.textContent = `\n      @keyframes spin {\n        0% { transform: rotate(0deg); }\n        100% { transform: rotate(360deg); }\n      }\n    `;\n    document.head.appendChild(style);\n    \n    return loading;\n  }\n  \n  // Create error display\n  function createErrorDisplay(error) {\n    const errorDiv = document.createElement('div');\n    errorDiv.className = 'blog-viewer-error';\n    errorDiv.style.cssText = `\n      position: absolute;\n      top: 50%;\n      left: 50%;\n      transform: translate(-50%, -50%);\n      text-align: center;\n      color: ${finalConfig.metaColor};\n      font-family: Arial, sans-serif;\n      max-width: 400px;\n      padding: 20px;\n    `;\n    \n    const icon = document.createElement('div');\n    icon.style.cssText = `\n      font-size: 48px;\n      margin-bottom: 15px;\n    `;\n    icon.textContent = '❌';\n    \n    const title = document.createElement('h3');\n    title.style.cssText = `\n      margin: 0 0 10px 0;\n      color: ${finalConfig.textColor};\n      font-size: 18px;\n    `;\n    title.textContent = 'Failed to Load Blog Post';\n    \n    const message = document.createElement('p');\n    message.style.cssText = `\n      margin: 0;\n      font-size: 14px;\n      line-height: 1.5;\n    `;\n    message.textContent = error || 'An unexpected error occurred while loading the blog post.';\n    \n    errorDiv.appendChild(icon);\n    errorDiv.appendChild(title);\n    errorDiv.appendChild(message);\n    \n    return errorDiv;\n  }\n  \n  // Create external blog iframe\n  function createExternalIframe() {\n    const iframeContainer = document.createElement('div');\n    iframeContainer.className = 'external-iframe-container';\n    iframeContainer.style.cssText = `\n      width: 100%;\n      height: 100%;\n      position: relative;\n    `;\n    \n    const iframe = document.createElement('iframe');\n    iframe.src = blogPost.externalUrl;\n    iframe.style.cssText = `\n      width: 100%;\n      height: 100%;\n      border: none;\n      background: white;\n    `;\n    \n    // Apply iframe settings\n    if (finalConfig.iframeSettings.sandbox) {\n      iframe.sandbox = finalConfig.iframeSettings.sandbox;\n    }\n    \n    if (finalConfig.iframeSettings.allowFullscreen) {\n      iframe.allowFullscreen = true;\n    }\n    \n    if (finalConfig.iframeSettings.loading) {\n      iframe.loading = finalConfig.iframeSettings.loading;\n    }\n    \n    // Handle iframe load events\n    iframe.addEventListener('load', () => {\n      viewerState.contentLoaded = true;\n      viewerState.isLoading = false;\n      \n      // Remove loading indicator\n      const loading = container.querySelector('.blog-viewer-loading');\n      if (loading) {\n        loading.remove();\n      }\n      \n      if (eventHandlers.onLoad) {\n        eventHandlers.onLoad();\n      }\n    });\n    \n    iframe.addEventListener('error', (e) => {\n      viewerState.error = 'Failed to load external blog post';\n      viewerState.isLoading = false;\n      \n      // Show error instead of iframe\n      iframeContainer.innerHTML = '';\n      iframeContainer.appendChild(createErrorDisplay(viewerState.error));\n      \n      if (eventHandlers.onError) {\n        eventHandlers.onError(viewerState.error);\n      }\n    });\n    \n    iframeContainer.appendChild(iframe);\n    return iframeContainer;\n  }\n  \n  // Create hosted content viewer\n  function createHostedContentViewer() {\n    const contentContainer = document.createElement('div');\n    contentContainer.className = 'hosted-content-container';\n    contentContainer.style.cssText = `\n      width: 100%;\n      height: 100%;\n      overflow-y: auto;\n      padding: ${finalConfig.contentPadding}px;\n      box-sizing: border-box;\n    `;\n    \n    const content = document.createElement('div');\n    content.className = 'blog-content';\n    content.style.cssText = `\n      max-width: ${finalConfig.maxContentWidth}px;\n      margin: 0 auto;\n      font-size: ${finalConfig.contentFontSize}px;\n      line-height: ${finalConfig.contentLineHeight};\n      color: ${finalConfig.textColor};\n      font-family: Georgia, serif;\n    `;\n    \n    // Load content\n    if (blogPost.contentUrl) {\n      loadHostedContent(content);\n    } else {\n      content.innerHTML = `\n        <p style=\"color: ${finalConfig.metaColor}; text-align: center; font-style: italic;\">\n          No content available for this blog post.\n        </p>\n      `;\n    }\n    \n    contentContainer.appendChild(content);\n    return contentContainer;\n  }\n  \n  // Load hosted content from URL\n  async function loadHostedContent(contentElement) {\n    viewerState.isLoading = true;\n    \n    try {\n      const response = await fetch(blogPost.contentUrl);\n      \n      if (!response.ok) {\n        throw new Error(`Failed to load content: ${response.statusText}`);\n      }\n      \n      const contentText = await response.text();\n      const contentType = response.headers.get('content-type') || '';\n      \n      // Process content based on type\n      if (contentType.includes('text/markdown') || blogPost.contentUrl.endsWith('.md')) {\n        // Process markdown (basic markdown support)\n        contentElement.innerHTML = processMarkdown(contentText);\n      } else if (contentType.includes('text/html') || blogPost.contentUrl.endsWith('.html')) {\n        // Sanitize and display HTML\n        contentElement.innerHTML = sanitizeHTML(contentText);\n      } else {\n        // Display as plain text\n        contentElement.innerHTML = `<pre style=\"white-space: pre-wrap; font-family: Georgia, serif;\">${escapeHTML(contentText)}</pre>`;\n      }\n      \n      viewerState.contentLoaded = true;\n      viewerState.isLoading = false;\n      \n      if (eventHandlers.onLoad) {\n        eventHandlers.onLoad();\n      }\n      \n    } catch (error) {\n      viewerState.error = error.message;\n      viewerState.isLoading = false;\n      \n      contentElement.innerHTML = `\n        <div style=\"text-align: center; color: ${finalConfig.metaColor}; padding: 40px;\">\n          <p>❌ Failed to load blog content</p>\n          <p style=\"font-size: 14px;\">${error.message}</p>\n        </div>\n      `;\n      \n      if (eventHandlers.onError) {\n        eventHandlers.onError(error.message);\n      }\n    }\n  }\n  \n  // Basic markdown processing\n  function processMarkdown(markdown) {\n    return markdown\n      // Headers\n      .replace(/^### (.+$)/gim, '<h3>$1</h3>')\n      .replace(/^## (.+$)/gim, '<h2>$1</h2>')\n      .replace(/^# (.+$)/gim, '<h1>$1</h1>')\n      // Bold and italic\n      .replace(/\\*\\*(.+?)\\*\\*/g, '<strong>$1</strong>')\n      .replace(/\\*(.+?)\\*/g, '<em>$1</em>')\n      // Links\n      .replace(/\\[(.+?)\\]\\((.+?)\\)/g, `<a href=\"$2\" style=\"color: ${finalConfig.linkColor};\" target=\"_blank\">$1</a>`)\n      // Line breaks\n      .replace(/\\n\\n/g, '</p><p>')\n      .replace(/\\n/g, '<br>')\n      // Wrap in paragraphs\n      .replace(/^(.+$)/gim, '<p>$1</p>')\n      // Code blocks (basic)\n      .replace(/```([\\s\\S]*?)```/g, '<pre style=\"background: #f6f8fa; padding: 15px; border-radius: 6px; overflow-x: auto;\"><code>$1</code></pre>')\n      // Inline code\n      .replace(/`(.+?)`/g, '<code style=\"background: #f6f8fa; padding: 2px 4px; border-radius: 3px; font-family: monospace;\">$1</code>');\n  }\n  \n  // Basic HTML sanitization (remove potentially dangerous elements)\n  function sanitizeHTML(html) {\n    const div = document.createElement('div');\n    div.innerHTML = html;\n    \n    // Remove script tags and event handlers\n    const scripts = div.querySelectorAll('script');\n    scripts.forEach(script => script.remove());\n    \n    // Remove on* attributes\n    const allElements = div.querySelectorAll('*');\n    allElements.forEach(el => {\n      Array.from(el.attributes).forEach(attr => {\n        if (attr.name.startsWith('on')) {\n          el.removeAttribute(attr.name);\n        }\n      });\n    });\n    \n    return div.innerHTML;\n  }\n  \n  // Escape HTML\n  function escapeHTML(text) {\n    const div = document.createElement('div');\n    div.textContent = text;\n    return div.innerHTML;\n  }\n  \n  // Build the viewer\n  function buildViewer() {\n    // Clear container\n    container.innerHTML = '';\n    \n    // Add header if enabled\n    const header = createHeader();\n    if (header) {\n      container.appendChild(header);\n    }\n    \n    // Create content area\n    const contentArea = document.createElement('div');\n    contentArea.style.cssText = `\n      position: relative;\n      height: ${header ? 'calc(100% - 80px)' : '100%'};\n      width: 100%;\n    `;\n    \n    // Show loading indicator initially\n    if (viewerState.isLoading) {\n      contentArea.appendChild(createLoadingIndicator());\n    }\n    \n    // Add content based on type\n    if (blogPost.type === 'external' && blogPost.externalUrl) {\n      contentArea.appendChild(createExternalIframe());\n    } else {\n      contentArea.appendChild(createHostedContentViewer());\n    }\n    \n    container.appendChild(contentArea);\n  }\n  \n  // Initialize viewer\n  viewerState.isLoading = blogPost.type === 'external' || !!blogPost.contentUrl;\n  buildViewer();\n  \n  // Component interface\n  const blogViewer = {\n    element: container,\n    \n    // Event handlers\n    onBack(handler) {\n      eventHandlers.onBack = handler;\n    },\n    \n    onLoad(handler) {\n      eventHandlers.onLoad = handler;\n    },\n    \n    onError(handler) {\n      eventHandlers.onError = handler;\n    },\n    \n    // State access\n    getState() {\n      return { ...viewerState };\n    },\n    \n    getBlogPost() {\n      return { ...blogPost };\n    },\n    \n    // Actions\n    reload() {\n      viewerState.isLoading = true;\n      viewerState.contentLoaded = false;\n      viewerState.error = null;\n      buildViewer();\n    },\n    \n    updateBlogPost(newBlogPost) {\n      blogPost = { ...newBlogPost };\n      viewerState.isLoading = true;\n      viewerState.contentLoaded = false;\n      viewerState.error = null;\n      buildViewer();\n    }\n  };\n  \n  return blogViewer;\n}\n\n/**\n * Create a modal blog viewer\n * @param {Object} blogPost - Blog post data\n * @param {Object} config - Configuration object\n * @returns {Object} Modal blog viewer with methods\n */\nexport function createModalBlogViewer(blogPost, config = {}) {\n  const modalConfig = {\n    ...config,\n    width: '90vw',\n    height: '90vh',\n    showBackButton: true\n  };\n  \n  // Create modal overlay\n  const overlay = document.createElement('div');\n  overlay.style.cssText = `\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: rgba(0, 0, 0, 0.8);\n    z-index: 2000;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  `;\n  \n  // Create modal content\n  const modal = document.createElement('div');\n  modal.style.cssText = `\n    width: ${modalConfig.width};\n    height: ${modalConfig.height};\n    background: white;\n    border-radius: 12px;\n    overflow: hidden;\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);\n    transform: scale(0.9);\n    transition: transform 0.3s ease;\n  `;\n  \n  // Create viewer\n  const viewer = createBlogViewer(blogPost, {\n    ...modalConfig,\n    width: '100%',\n    height: '100%'\n  });\n  \n  modal.appendChild(viewer.element);\n  overlay.appendChild(modal);\n  \n  // Close modal function\n  function closeModal() {\n    overlay.style.opacity = '0';\n    modal.style.transform = 'scale(0.9)';\n    \n    setTimeout(() => {\n      if (overlay.parentNode) {\n        overlay.parentNode.removeChild(overlay);\n      }\n    }, 300);\n  }\n  \n  // Handle back button and overlay clicks\n  viewer.onBack(closeModal);\n  \n  overlay.addEventListener('click', (e) => {\n    if (e.target === overlay) {\n      closeModal();\n    }\n  });\n  \n  // Escape key handler\n  const escapeHandler = (e) => {\n    if (e.key === 'Escape') {\n      closeModal();\n      document.removeEventListener('keydown', escapeHandler);\n    }\n  };\n  document.addEventListener('keydown', escapeHandler);\n  \n  // Add to DOM and animate in\n  document.body.appendChild(overlay);\n  \n  setTimeout(() => {\n    overlay.style.opacity = '1';\n    modal.style.transform = 'scale(1)';\n  }, 10);\n  \n  return {\n    close: closeModal,\n    viewer\n  };\n}\n\n/**\n * Export default configuration\n */\nexport { DEFAULT_BLOG_VIEWER_CONFIG as blogViewerDefaults };