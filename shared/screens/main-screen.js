/**\n * Main Screen Component for The Nullary\n * Shows blog post previews from Sanora with creation and viewing capabilities\n */\n\nimport { createLayeredUI } from '../utils/layered-ui.js';\nimport { createBlogPreviewCard, createBlogPreviewGrid, createBlogPreviewSkeleton } from '../components/blog-preview.js';\nimport { createBlogCreationForm } from '../components/blog-creation-form.js';\nimport { createModalBlogViewer } from '../components/blog-viewer.js';\nimport { createMockSanoraClient, SanoraClient } from '../utils/sanora-integration.js';\n\n/**\n * Default main screen configuration\n */\nconst DEFAULT_MAIN_SCREEN_CONFIG = {\n  // Screen metadata\n  title: 'Blog Posts',\n  description: 'Discover and share amazing blog content',\n  \n  // Layout\n  width: '100%',\n  height: '100vh',\n  \n  // Grid settings\n  gridColumns: 2,\n  gridGap: 20,\n  \n  // Theme\n  theme: {\n    colors: {\n      background: '#f8fafc',\n      surface: '#ffffff',\n      primary: '#3b82f6',\n      secondary: '#64748b',\n      accent: '#10b981',\n      text: '#1e293b',\n      textSecondary: '#64748b',\n      border: '#e2e8f0',\n      success: '#10b981',\n      warning: '#f59e0b',\n      error: '#ef4444'\n    },\n    typography: {\n      fontFamily: 'Georgia, serif',\n      fontSize: 16,\n      titleSize: 24,\n      headerSize: 28\n    }\n  },\n  \n  // Features\n  features: {\n    showCreateButton: true,\n    showRefreshButton: true,\n    showFilters: true,\n    enableSearch: true,\n    showStats: true,\n    autoRefresh: false\n  },\n  \n  // Sanora integration\n  sanora: {\n    useMockClient: false,\n    autoInit: true,\n    refreshInterval: 300000 // 5 minutes\n  },\n  \n  // Feed settings\n  feed: {\n    pageSize: 20,\n    preloadCount: 5,\n    showLoadMore: true\n  }\n};\n\n/**\n * Create main screen component\n * @param {Object} config - Configuration object\n * @returns {Object} Main screen component with methods\n */\nexport function createMainScreen(config = {}) {\n  const finalConfig = { ...DEFAULT_MAIN_SCREEN_CONFIG, ...config };\n  \n  // Screen state\n  const screenState = {\n    blogPosts: [],\n    filteredPosts: [],\n    isLoading: false,\n    error: null,\n    lastRefresh: 0,\n    currentPage: 1,\n    searchQuery: '',\n    filters: {\n      type: 'all', // 'all', 'hosted', 'external'\n      author: '',\n      dateRange: 'all' // 'all', 'week', 'month', 'year'\n    },\n    layeredUI: null,\n    sanoraClient: null,\n    sessionlessKeys: null\n  };\n  \n  // Event handlers\n  const eventHandlers = {\n    onPostClick: null,\n    onPostCreate: null,\n    onError: null,\n    onRefresh: null\n  };\n  \n  // Initialize Sanora client\n  async function initializeSanora() {\n    try {\n      if (finalConfig.sanora.useMockClient) {\n        screenState.sanoraClient = createMockSanoraClient();\n        await screenState.sanoraClient.initialize({});\n      } else {\n        // Use real Sanora client with sessionless keys\n        if (screenState.sessionlessKeys) {\n          screenState.sanoraClient = new SanoraClient();\n          await screenState.sanoraClient.initialize(screenState.sessionlessKeys);\n        } else {\n          console.warn('‚ö†Ô∏è No sessionless keys provided, using mock client');\n          screenState.sanoraClient = createMockSanoraClient();\n          await screenState.sanoraClient.initialize({});\n        }\n      }\n      \n      console.log('üåê Sanora client initialized');\n      return true;\n      \n    } catch (error) {\n      console.error('‚ùå Failed to initialize Sanora client:', error);\n      screenState.error = `Failed to connect to Sanora: ${error.message}`;\n      return false;\n    }\n  }\n  \n  // Create layered UI\n  function createUI() {\n    screenState.layeredUI = createLayeredUI({\n      className: 'main-screen-ui',\n      width: finalConfig.width,\n      height: finalConfig.height,\n      layers: [\n        {\n          id: 'background',\n          type: 'div',\n          zIndex: 1,\n          config: {\n            backgroundColor: finalConfig.theme.colors.background\n          }\n        },\n        {\n          id: 'blog-feed',\n          type: 'feed',\n          zIndex: 100,\n          config: {\n            backgroundColor: 'transparent',\n            responsive: true,\n            showTimestamps: false,\n            showActions: false,\n            emptyText: 'No blog posts found. Create your first post!',\n            loadingText: 'Loading blog posts...'\n          }\n        },\n        {\n          id: 'header-hud',\n          type: 'hud',\n          zIndex: 1000,\n          config: {\n            background: 'rgba(248, 250, 252, 0.95)',\n            transparentZones: [\n              {\n                x: 20,\n                y: 100,\n                width: 'calc(100% - 40px)',\n                height: 'calc(100% - 140px)',\n                shape: 'rect'\n              }\n            ],\n            elements: [\n              {\n                id: 'screen-title',\n                type: 'text',\n                x: 30,\n                y: 35,\n                content: finalConfig.title,\n                color: finalConfig.theme.colors.text,\n                fontSize: finalConfig.theme.typography.headerSize,\n                fontFamily: finalConfig.theme.typography.fontFamily\n              },\n              {\n                id: 'create-button',\n                type: 'button',\n                x: 'calc(100% - 250px)',\n                y: 20,\n                width: 120,\n                height: 40,\n                content: '‚úèÔ∏è Create Post',\n                backgroundColor: finalConfig.theme.colors.primary,\n                color: '#ffffff',\n                onClick: () => showCreateForm()\n              },\n              {\n                id: 'refresh-button',\n                type: 'button',\n                x: 'calc(100% - 120px)',\n                y: 20,\n                width: 100,\n                height: 40,\n                content: 'üîÑ Refresh',\n                backgroundColor: finalConfig.theme.colors.accent,\n                color: '#ffffff',\n                onClick: () => refreshPosts()\n              },\n              {\n                id: 'search-input',\n                type: 'text',\n                x: 30,\n                y: 70,\n                content: 'Search posts...',\n                color: finalConfig.theme.colors.textSecondary,\n                fontSize: 14\n              },\n              {\n                id: 'stats-text',\n                type: 'text',\n                x: 30,\n                y: 'calc(100% - 20px)',\n                content: 'Ready',\n                color: finalConfig.theme.colors.textSecondary,\n                fontSize: 12\n              }\n            ]\n          }\n        }\n      ]\n    });\n    \n    return screenState.layeredUI;\n  }\n  \n  // Load blog posts from Sanora\n  async function loadBlogPosts() {\n    if (!screenState.sanoraClient) {\n      await initializeSanora();\n    }\n    \n    if (screenState.isLoading) return;\n    \n    screenState.isLoading = true;\n    updateStatus('Loading blog posts...');\n    \n    const feedLayer = screenState.layeredUI.getFeedLayer();\n    if (feedLayer && feedLayer.component) {\n      feedLayer.component.setLoading(true);\n    }\n    \n    try {\n      // Fetch blog previews from Sanora\n      const blogPreviews = await screenState.sanoraClient.getBlogPreviews();\n      \n      // Convert to feed posts\n      const feedPosts = blogPreviews.map(blog => ({\n        id: `blog-${blog.id}`,\n        element: createBlogPreviewCard(\n          blog,\n          {\n            width: 380,\n            height: 320,\n            hoverEnabled: true,\n            clickable: true\n          },\n          handlePostClick\n        ),\n        timestamp: blog.publishDate,\n        type: 'blog-preview',\n        data: blog\n      }));\n      \n      // Update state\n      screenState.blogPosts = blogPreviews;\n      screenState.filteredPosts = [...blogPreviews];\n      screenState.lastRefresh = Date.now();\n      \n      // Apply filters\n      applyFilters();\n      \n      // Update feed\n      if (feedLayer && feedLayer.component) {\n        feedLayer.component.setPosts(feedPosts);\n        feedLayer.component.setLoading(false);\n      }\n      \n      updateStatus(`Loaded ${blogPreviews.length} blog posts`);\n      updateStats();\n      \n      if (eventHandlers.onRefresh) {\n        eventHandlers.onRefresh(blogPreviews);\n      }\n      \n    } catch (error) {\n      console.error('‚ùå Error loading blog posts:', error);\n      screenState.error = error.message;\n      updateStatus(`Error loading posts: ${error.message}`);\n      \n      if (feedLayer && feedLayer.component) {\n        feedLayer.component.setLoading(false);\n      }\n      \n      if (eventHandlers.onError) {\n        eventHandlers.onError(error);\n      }\n    }\n    \n    screenState.isLoading = false;\n  }\n  \n  // Handle post click\n  function handlePostClick(blogPost, event) {\n    console.log('üìñ Opening blog post:', blogPost.title);\n    \n    // Create modal viewer\n    const modalViewer = createModalBlogViewer(blogPost, {\n      theme: finalConfig.theme\n    });\n    \n    if (eventHandlers.onPostClick) {\n      eventHandlers.onPostClick(blogPost, modalViewer);\n    }\n  }\n  \n  // Show create form modal\n  function showCreateForm() {\n    console.log('‚úèÔ∏è Showing create form...');\n    \n    // Create modal overlay\n    const modalOverlay = document.createElement('div');\n    modalOverlay.style.cssText = `\n      position: fixed;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      background: rgba(0, 0, 0, 0.5);\n      z-index: 2000;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      opacity: 0;\n      transition: opacity 0.3s ease;\n    `;\n    \n    // Create modal content\n    const modalContent = document.createElement('div');\n    modalContent.style.cssText = `\n      background: white;\n      border-radius: 12px;\n      max-width: 700px;\n      width: 90%;\n      max-height: 90%;\n      overflow-y: auto;\n      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);\n      transform: scale(0.9);\n      transition: transform 0.3s ease;\n    `;\n    \n    // Create form\n    const form = createBlogCreationForm({\n      width: 640,\n      theme: finalConfig.theme\n    });\n    \n    // Handle form submission\n    form.onSubmit(async (formData) => {\n      console.log('üì§ Form submitted:', formData);\n      \n      try {\n        form.setSubmitting(true);\n        updateStatus('Creating blog post...');\n        \n        // Create blog product in Sanora\n        const result = await screenState.sanoraClient.createBlogProduct({\n          title: formData.data.title,\n          description: formData.data.description,\n          author: formData.data.author,\n          publishDate: formData.data.publishDate,\n          price: formData.data.price ? parseFloat(formData.data.price) : null,\n          previewImageFile: formData.files.previewImage,\n          contentFile: formData.files.contentFile,\n          externalUrl: formData.data.externalUrl,\n          type: formData.type\n        });\n        \n        showMessage('‚úÖ Blog post created successfully!', 'success');\n        \n        // Close modal\n        closeModal();\n        \n        // Refresh posts\n        await refreshPosts();\n        \n        if (eventHandlers.onPostCreate) {\n          eventHandlers.onPostCreate(result.blogData);\n        }\n        \n      } catch (error) {\n        console.error('‚ùå Error creating blog post:', error);\n        showMessage(`‚ùå Error: ${error.message}`, 'error');\n      } finally {\n        form.setSubmitting(false);\n      }\n    });\n    \n    modalContent.appendChild(form.element);\n    modalOverlay.appendChild(modalContent);\n    document.body.appendChild(modalOverlay);\n    \n    // Close modal function\n    function closeModal() {\n      modalOverlay.style.opacity = '0';\n      modalContent.style.transform = 'scale(0.9)';\n      setTimeout(() => {\n        if (modalOverlay.parentNode) {\n          modalOverlay.parentNode.removeChild(modalOverlay);\n        }\n      }, 300);\n    }\n    \n    // Close on overlay click\n    modalOverlay.addEventListener('click', (e) => {\n      if (e.target === modalOverlay) {\n        closeModal();\n      }\n    });\n    \n    // Escape key to close\n    const escapeHandler = (e) => {\n      if (e.key === 'Escape') {\n        closeModal();\n        document.removeEventListener('keydown', escapeHandler);\n      }\n    };\n    document.addEventListener('keydown', escapeHandler);\n    \n    // Animate in\n    setTimeout(() => {\n      modalOverlay.style.opacity = '1';\n      modalContent.style.transform = 'scale(1)';\n    }, 10);\n  }\n  \n  // Refresh posts\n  async function refreshPosts() {\n    console.log('üîÑ Refreshing posts...');\n    screenState.lastRefresh = 0; // Force refresh\n    await loadBlogPosts();\n  }\n  \n  // Apply filters\n  function applyFilters() {\n    let filtered = [...screenState.blogPosts];\n    \n    // Type filter\n    if (screenState.filters.type !== 'all') {\n      filtered = filtered.filter(post => post.type === screenState.filters.type);\n    }\n    \n    // Author filter\n    if (screenState.filters.author) {\n      filtered = filtered.filter(post => \n        post.author.toLowerCase().includes(screenState.filters.author.toLowerCase())\n      );\n    }\n    \n    // Search query\n    if (screenState.searchQuery) {\n      const query = screenState.searchQuery.toLowerCase();\n      filtered = filtered.filter(post => \n        post.title.toLowerCase().includes(query) ||\n        post.description.toLowerCase().includes(query) ||\n        post.author.toLowerCase().includes(query)\n      );\n    }\n    \n    // Date range filter\n    if (screenState.filters.dateRange !== 'all') {\n      const now = new Date();\n      const ranges = {\n        week: 7 * 24 * 60 * 60 * 1000,\n        month: 30 * 24 * 60 * 60 * 1000,\n        year: 365 * 24 * 60 * 60 * 1000\n      };\n      \n      const cutoff = new Date(now.getTime() - ranges[screenState.filters.dateRange]);\n      filtered = filtered.filter(post => new Date(post.publishDate) >= cutoff);\n    }\n    \n    screenState.filteredPosts = filtered;\n    updateStats();\n  }\n  \n  // Update status text\n  function updateStatus(text) {\n    if (screenState.layeredUI) {\n      screenState.layeredUI.updateHUDElement('stats-text', {\n        content: text\n      });\n    }\n  }\n  \n  // Update stats display\n  function updateStats() {\n    const total = screenState.blogPosts.length;\n    const filtered = screenState.filteredPosts.length;\n    const hosted = screenState.filteredPosts.filter(p => p.type === 'hosted').length;\n    const external = screenState.filteredPosts.filter(p => p.type === 'external').length;\n    \n    const statsText = `${filtered} of ${total} posts ‚Ä¢ ${hosted} hosted, ${external} external`;\n    updateStatus(statsText);\n  }\n  \n  // Show message\n  function showMessage(text, type = 'info') {\n    const messageEl = document.createElement('div');\n    messageEl.style.cssText = `\n      position: fixed;\n      top: 20px;\n      left: 50%;\n      transform: translateX(-50%);\n      z-index: 3000;\n      padding: 12px 24px;\n      border-radius: 8px;\n      font-family: Arial, sans-serif;\n      font-size: 14px;\n      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n      opacity: 0;\n      transition: opacity 0.3s ease;\n      background: ${type === 'error' ? '#fef2f2' : type === 'success' ? '#f0fdf4' : '#eff6ff'};\n      color: ${type === 'error' ? '#991b1b' : type === 'success' ? '#166534' : '#1e40af'};\n      border: 1px solid ${type === 'error' ? '#fecaca' : type === 'success' ? '#bbf7d0' : '#dbeafe'};\n    `;\n    messageEl.textContent = text;\n    \n    document.body.appendChild(messageEl);\n    \n    setTimeout(() => messageEl.style.opacity = '1', 100);\n    setTimeout(() => {\n      messageEl.style.opacity = '0';\n      setTimeout(() => {\n        if (messageEl.parentNode) {\n          messageEl.parentNode.removeChild(messageEl);\n        }\n      }, 300);\n    }, 3000);\n  }\n  \n  // Setup event handlers\n  function setupEventHandlers() {\n    if (!screenState.layeredUI) return;\n    \n    // Handle post clicks in feed\n    screenState.layeredUI.onPostClick((post, index, event) => {\n      if (post.type === 'blog-preview' && post.data) {\n        handlePostClick(post.data, event);\n      }\n    });\n  }\n  \n  // Screen interface\n  const mainScreen = {\n    element: null,\n    \n    // Initialization\n    async initialize(sessionlessKeys = null) {\n      console.log('üèóÔ∏è Initializing main screen...');\n      \n      screenState.sessionlessKeys = sessionlessKeys;\n      \n      // Initialize Sanora client\n      if (finalConfig.sanora.autoInit) {\n        await initializeSanora();\n      }\n      \n      // Create UI\n      const ui = createUI();\n      this.element = ui.element;\n      \n      // Setup event handlers\n      setupEventHandlers();\n      \n      // Load initial posts\n      await loadBlogPosts();\n      \n      console.log('‚úÖ Main screen initialized');\n      return this;\n    },\n    \n    // Data management\n    async refresh() {\n      await refreshPosts();\n    },\n    \n    getBlogPosts() {\n      return [...screenState.filteredPosts];\n    },\n    \n    search(query) {\n      screenState.searchQuery = query;\n      applyFilters();\n      \n      // Update feed\n      const feedLayer = screenState.layeredUI.getFeedLayer();\n      if (feedLayer && feedLayer.component) {\n        const feedPosts = screenState.filteredPosts.map(blog => ({\n          id: `blog-${blog.id}`,\n          element: createBlogPreviewCard(blog, {}, handlePostClick),\n          timestamp: blog.publishDate,\n          type: 'blog-preview',\n          data: blog\n        }));\n        feedLayer.component.setPosts(feedPosts);\n      }\n    },\n    \n    setFilter(key, value) {\n      screenState.filters[key] = value;\n      applyFilters();\n    },\n    \n    // Sanora integration\n    setSanoraClient(client) {\n      screenState.sanoraClient = client;\n    },\n    \n    getSanoraClient() {\n      return screenState.sanoraClient;\n    },\n    \n    // Event handlers\n    onPostClick(handler) {\n      eventHandlers.onPostClick = handler;\n    },\n    \n    onPostCreate(handler) {\n      eventHandlers.onPostCreate = handler;\n    },\n    \n    onError(handler) {\n      eventHandlers.onError = handler;\n    },\n    \n    onRefresh(handler) {\n      eventHandlers.onRefresh = handler;\n    },\n    \n    // State access\n    getState() {\n      return {\n        postsCount: screenState.blogPosts.length,\n        filteredCount: screenState.filteredPosts.length,\n        isLoading: screenState.isLoading,\n        lastRefresh: screenState.lastRefresh,\n        searchQuery: screenState.searchQuery,\n        filters: { ...screenState.filters }\n      };\n    },\n    \n    // Cleanup\n    destroy() {\n      if (this.element && this.element.parentNode) {\n        this.element.parentNode.removeChild(this.element);\n      }\n    }\n  };\n  \n  return mainScreen;\n}\n\n/**\n * Export default configuration\n */\nexport { DEFAULT_MAIN_SCREEN_CONFIG as mainScreenDefaults };