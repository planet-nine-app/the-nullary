/**
 * Blog Creation Form Component for The Nullary
 * Creates comprehensive forms for blog post creation with Sanora integration
 */

import { createSVGContainer, createSVGElement, generateSVGId } from '../utils/svg-utils.js';\nimport { createFormField } from '../utils/form-utils.js';\n\n/**\n * Default blog creation form configuration\n */\nconst DEFAULT_BLOG_FORM_CONFIG = {\n  // Form dimensions\n  width: 600,\n  height: 'auto',\n  \n  // Layout\n  padding: 30,\n  fieldSpacing: 25,\n  sectionSpacing: 40,\n  borderRadius: 12,\n  \n  // Typography\n  labelFontSize: 14,\n  inputFontSize: 16,\n  titleFontSize: 24,\n  helpTextFontSize: 12,\n  \n  // Colors\n  backgroundColor: '#ffffff',\n  borderColor: '#e2e8f0',\n  labelColor: '#374151',\n  inputBackgroundColor: '#f9fafb',\n  inputBorderColor: '#d1d5db',\n  inputFocusColor: '#3b82f6',\n  titleColor: '#1f2937',\n  helpTextColor: '#6b7280',\n  buttonColor: '#3b82f6',\n  buttonHoverColor: '#2563eb',\n  errorColor: '#ef4444',\n  successColor: '#10b981',\n  \n  // Features\n  showImageUpload: true,\n  showPricing: true,\n  showExternalUrl: true,\n  showPreview: true,\n  enableDragDrop: true,\n  validateInputs: true,\n  \n  // File upload\n  maxImageSize: 5 * 1024 * 1024, // 5MB\n  allowedImageTypes: ['image/jpeg', 'image/png', 'image/webp'],\n  maxContentSize: 50 * 1024 * 1024, // 50MB for blog artifacts\n  allowedContentTypes: ['.md', '.html', '.txt', '.pdf'],\n  \n  className: 'blog-creation-form'\n};\n\n/**\n * Create blog creation form component\n * @param {Object} config - Configuration object\n * @returns {Object} Blog creation form with methods\n */\nexport function createBlogCreationForm(config = {}) {\n  const finalConfig = { ...DEFAULT_BLOG_FORM_CONFIG, ...config };\n  \n  // Create main container\n  const container = document.createElement('div');\n  container.className = finalConfig.className;\n  container.style.cssText = `\n    max-width: ${finalConfig.width}px;\n    margin: 0 auto;\n    background: ${finalConfig.backgroundColor};\n    border: 1px solid ${finalConfig.borderColor};\n    border-radius: ${finalConfig.borderRadius}px;\n    padding: ${finalConfig.padding}px;\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  `;\n  \n  // Form state\n  const formState = {\n    type: 'hosted', // 'hosted' or 'external'\n    data: {\n      title: '',\n      description: '',\n      author: '',\n      publishDate: new Date().toISOString().split('T')[0],\n      price: null,\n      previewImage: null,\n      contentFile: null,\n      externalUrl: '',\n      tags: []\n    },\n    files: {\n      previewImage: null,\n      contentFile: null\n    },\n    errors: {},\n    isSubmitting: false\n  };\n  \n  // Event handlers\n  const eventHandlers = {\n    onSubmit: null,\n    onPreview: null,\n    onChange: null,\n    onTypeChange: null\n  };\n  \n  // Create form header\n  function createFormHeader() {\n    const header = document.createElement('div');\n    header.className = 'form-header';\n    header.style.cssText = `\n      margin-bottom: ${finalConfig.sectionSpacing}px;\n      text-align: center;\n    `;\n    \n    const title = document.createElement('h2');\n    title.style.cssText = `\n      margin: 0 0 10px 0;\n      font-size: ${finalConfig.titleFontSize}px;\n      font-family: Georgia, serif;\n      color: ${finalConfig.titleColor};\n      font-weight: bold;\n    `;\n    title.textContent = 'Create Blog Post';\n    \n    const subtitle = document.createElement('p');\n    subtitle.style.cssText = `\n      margin: 0;\n      font-size: ${finalConfig.helpTextFontSize}px;\n      color: ${finalConfig.helpTextColor};\n      font-family: Arial, sans-serif;\n    `;\n    subtitle.textContent = 'Share your thoughts with the world';\n    \n    header.appendChild(title);\n    header.appendChild(subtitle);\n    return header;\n  }\n  \n  // Create type selector\n  function createTypeSelector() {\n    const section = document.createElement('div');\n    section.className = 'type-selector-section';\n    section.style.cssText = `\n      margin-bottom: ${finalConfig.sectionSpacing}px;\n    `;\n    \n    const label = document.createElement('label');\n    label.style.cssText = `\n      display: block;\n      margin-bottom: 10px;\n      font-size: ${finalConfig.labelFontSize}px;\n      font-weight: bold;\n      color: ${finalConfig.labelColor};\n      font-family: Arial, sans-serif;\n    `;\n    label.textContent = 'Blog Post Type';\n    \n    const typeContainer = document.createElement('div');\n    typeContainer.style.cssText = `\n      display: flex;\n      gap: 15px;\n      margin-bottom: 15px;\n    `;\n    \n    // Hosted option\n    const hostedOption = createRadioOption('hosted', 'Host on Sanora', 'Upload your blog content and images to be hosted on Sanora', true);\n    \n    // External option\n    const externalOption = createRadioOption('external', 'External Link', 'Link to a blog post hosted elsewhere (will be shown in iframe)', false);\n    \n    typeContainer.appendChild(hostedOption);\n    typeContainer.appendChild(externalOption);\n    \n    section.appendChild(label);\n    section.appendChild(typeContainer);\n    \n    return section;\n  }\n  \n  // Create radio option\n  function createRadioOption(value, title, description, checked = false) {\n    const option = document.createElement('div');\n    option.style.cssText = `\n      flex: 1;\n      padding: 15px;\n      border: 2px solid ${checked ? finalConfig.inputFocusColor : finalConfig.inputBorderColor};\n      border-radius: 8px;\n      cursor: pointer;\n      transition: all 0.2s ease;\n      background: ${checked ? 'rgba(59, 130, 246, 0.05)' : finalConfig.inputBackgroundColor};\n    `;\n    \n    const radio = document.createElement('input');\n    radio.type = 'radio';\n    radio.name = 'blog-type';\n    radio.value = value;\n    radio.checked = checked;\n    radio.style.cssText = `\n      margin-right: 8px;\n      accent-color: ${finalConfig.inputFocusColor};\n    `;\n    \n    const titleEl = document.createElement('div');\n    titleEl.style.cssText = `\n      font-weight: bold;\n      font-size: ${finalConfig.labelFontSize}px;\n      color: ${finalConfig.labelColor};\n      margin-bottom: 5px;\n    `;\n    titleEl.textContent = title;\n    \n    const descEl = document.createElement('div');\n    descEl.style.cssText = `\n      font-size: ${finalConfig.helpTextFontSize}px;\n      color: ${finalConfig.helpTextColor};\n      line-height: 1.4;\n    `;\n    descEl.textContent = description;\n    \n    // Event handlers\n    const updateSelection = () => {\n      const isSelected = radio.checked;\n      option.style.borderColor = isSelected ? finalConfig.inputFocusColor : finalConfig.inputBorderColor;\n      option.style.background = isSelected ? 'rgba(59, 130, 246, 0.05)' : finalConfig.inputBackgroundColor;\n      \n      if (isSelected) {\n        formState.type = value;\n        updateFormVisibility();\n        if (eventHandlers.onTypeChange) {\n          eventHandlers.onTypeChange(value);\n        }\n      }\n    };\n    \n    radio.addEventListener('change', updateSelection);\n    option.addEventListener('click', () => {\n      radio.checked = true;\n      updateSelection();\n    });\n    \n    option.appendChild(radio);\n    option.appendChild(titleEl);\n    option.appendChild(descEl);\n    \n    if (checked) {\n      formState.type = value;\n    }\n    \n    return option;\n  }\n  \n  // Create basic fields section\n  function createBasicFields() {\n    const section = document.createElement('div');\n    section.className = 'basic-fields-section';\n    section.style.cssText = `\n      margin-bottom: ${finalConfig.sectionSpacing}px;\n    `;\n    \n    // Title field\n    const titleField = createInputField('title', 'Blog Title', 'text', {\n      placeholder: 'Enter an engaging title for your blog post',\n      required: true\n    });\n    \n    // Description field\n    const descriptionField = createInputField('description', 'Short Description', 'textarea', {\n      placeholder: 'Write a brief description that will appear in the preview card',\n      required: true,\n      rows: 3\n    });\n    \n    // Author field\n    const authorField = createInputField('author', 'Author', 'text', {\n      placeholder: 'Your name or pen name',\n      required: true\n    });\n    \n    // Publish date field\n    const dateField = createInputField('publishDate', 'Publish Date', 'date', {\n      value: formState.data.publishDate,\n      required: true\n    });\n    \n    section.appendChild(titleField);\n    section.appendChild(descriptionField);\n    section.appendChild(authorField);\n    section.appendChild(dateField);\n    \n    return section;\n  }\n  \n  // Create hosted content section\n  function createHostedContentSection() {\n    const section = document.createElement('div');\n    section.className = 'hosted-content-section';\n    section.style.cssText = `\n      margin-bottom: ${finalConfig.sectionSpacing}px;\n    `;\n    \n    // Preview image upload\n    const imageUpload = createFileUploadField('previewImage', 'Preview Image', {\n      accept: finalConfig.allowedImageTypes.join(','),\n      helpText: 'Upload a preview image for your blog post (JPEG, PNG, WebP)',\n      showPreview: true\n    });\n    \n    // Blog content upload\n    const contentUpload = createFileUploadField('contentFile', 'Blog Content', {\n      accept: finalConfig.allowedContentTypes.join(','),\n      helpText: 'Upload your blog content (Markdown, HTML, PDF, or text file)',\n      showPreview: false\n    });\n    \n    // Pricing field (optional)\n    const pricingField = createInputField('price', 'Price (Optional)', 'number', {\n      placeholder: '0.00',\n      min: '0',\n      step: '0.01',\n      helpText: 'Set a price if you want to sell this blog post (leave empty for free)'\n    });\n    \n    section.appendChild(imageUpload);\n    section.appendChild(contentUpload);\n    section.appendChild(pricingField);\n    \n    return section;\n  }\n  \n  // Create external URL section\n  function createExternalUrlSection() {\n    const section = document.createElement('div');\n    section.className = 'external-url-section';\n    section.style.cssText = `\n      margin-bottom: ${finalConfig.sectionSpacing}px;\n      display: none;\n    `;\n    \n    // External URL field\n    const urlField = createInputField('externalUrl', 'Blog Post URL', 'url', {\n      placeholder: 'https://example.com/my-blog-post',\n      required: true,\n      helpText: 'Enter the full URL to your blog post'\n    });\n    \n    // Preview image upload (optional for external)\n    const imageUpload = createFileUploadField('previewImage', 'Preview Image (Optional)', {\n      accept: finalConfig.allowedImageTypes.join(','),\n      helpText: 'Upload a custom preview image, or we\\'ll try to extract one from the URL',\n      showPreview: true\n    });\n    \n    section.appendChild(urlField);\n    section.appendChild(imageUpload);\n    \n    return section;\n  }\n  \n  // Create input field\n  function createInputField(name, label, type, options = {}) {\n    const fieldContainer = document.createElement('div');\n    fieldContainer.style.cssText = `\n      margin-bottom: ${finalConfig.fieldSpacing}px;\n    `;\n    \n    const labelEl = document.createElement('label');\n    labelEl.style.cssText = `\n      display: block;\n      margin-bottom: 8px;\n      font-size: ${finalConfig.labelFontSize}px;\n      font-weight: bold;\n      color: ${finalConfig.labelColor};\n      font-family: Arial, sans-serif;\n    `;\n    labelEl.textContent = label + (options.required ? ' *' : '');\n    \n    let inputEl;\n    if (type === 'textarea') {\n      inputEl = document.createElement('textarea');\n      inputEl.rows = options.rows || 4;\n    } else {\n      inputEl = document.createElement('input');\n      inputEl.type = type;\n    }\n    \n    inputEl.name = name;\n    inputEl.placeholder = options.placeholder || '';\n    inputEl.value = options.value || formState.data[name] || '';\n    inputEl.required = options.required || false;\n    \n    if (options.min) inputEl.min = options.min;\n    if (options.max) inputEl.max = options.max;\n    if (options.step) inputEl.step = options.step;\n    \n    inputEl.style.cssText = `\n      width: 100%;\n      padding: 12px;\n      border: 1px solid ${finalConfig.inputBorderColor};\n      border-radius: 6px;\n      font-size: ${finalConfig.inputFontSize}px;\n      font-family: Arial, sans-serif;\n      background: ${finalConfig.inputBackgroundColor};\n      transition: border-color 0.2s ease;\n      box-sizing: border-box;\n      resize: ${type === 'textarea' ? 'vertical' : 'none'};\n    `;\n    \n    // Focus/blur handlers\n    inputEl.addEventListener('focus', () => {\n      inputEl.style.borderColor = finalConfig.inputFocusColor;\n      inputEl.style.outline = 'none';\n    });\n    \n    inputEl.addEventListener('blur', () => {\n      inputEl.style.borderColor = finalConfig.inputBorderColor;\n    });\n    \n    // Input handler\n    inputEl.addEventListener('input', (e) => {\n      formState.data[name] = e.target.value;\n      if (eventHandlers.onChange) {\n        eventHandlers.onChange(name, e.target.value, formState.data);\n      }\n    });\n    \n    fieldContainer.appendChild(labelEl);\n    fieldContainer.appendChild(inputEl);\n    \n    // Help text\n    if (options.helpText) {\n      const helpText = document.createElement('div');\n      helpText.style.cssText = `\n        margin-top: 5px;\n        font-size: ${finalConfig.helpTextFontSize}px;\n        color: ${finalConfig.helpTextColor};\n        font-family: Arial, sans-serif;\n      `;\n      helpText.textContent = options.helpText;\n      fieldContainer.appendChild(helpText);\n    }\n    \n    return fieldContainer;\n  }\n  \n  // Create file upload field\n  function createFileUploadField(name, label, options = {}) {\n    const fieldContainer = document.createElement('div');\n    fieldContainer.style.cssText = `\n      margin-bottom: ${finalConfig.fieldSpacing}px;\n    `;\n    \n    const labelEl = document.createElement('label');\n    labelEl.style.cssText = `\n      display: block;\n      margin-bottom: 8px;\n      font-size: ${finalConfig.labelFontSize}px;\n      font-weight: bold;\n      color: ${finalConfig.labelColor};\n      font-family: Arial, sans-serif;\n    `;\n    labelEl.textContent = label;\n    \n    // File input (hidden)\n    const fileInput = document.createElement('input');\n    fileInput.type = 'file';\n    fileInput.name = name;\n    fileInput.accept = options.accept || '';\n    fileInput.style.display = 'none';\n    \n    // Drop zone\n    const dropZone = document.createElement('div');\n    dropZone.style.cssText = `\n      border: 2px dashed ${finalConfig.inputBorderColor};\n      border-radius: 8px;\n      padding: 20px;\n      text-align: center;\n      cursor: pointer;\n      transition: all 0.2s ease;\n      background: ${finalConfig.inputBackgroundColor};\n    `;\n    \n    const dropIcon = document.createElement('div');\n    dropIcon.style.cssText = `\n      font-size: 32px;\n      margin-bottom: 10px;\n    `;\n    dropIcon.textContent = '📁';\n    \n    const dropText = document.createElement('div');\n    dropText.style.cssText = `\n      font-size: ${finalConfig.inputFontSize}px;\n      color: ${finalConfig.labelColor};\n      margin-bottom: 5px;\n    `;\n    dropText.textContent = 'Click to upload or drag and drop';\n    \n    const dropSubText = document.createElement('div');\n    dropSubText.style.cssText = `\n      font-size: ${finalConfig.helpTextFontSize}px;\n      color: ${finalConfig.helpTextColor};\n    `;\n    \n    dropZone.appendChild(dropIcon);\n    dropZone.appendChild(dropText);\n    dropZone.appendChild(dropSubText);\n    \n    // Preview area\n    const previewArea = document.createElement('div');\n    previewArea.style.cssText = `\n      margin-top: 10px;\n      display: none;\n    `;\n    \n    // Event handlers\n    const handleFileSelect = (file) => {\n      if (!file) return;\n      \n      formState.files[name] = file;\n      \n      // Update drop zone\n      dropText.textContent = file.name;\n      dropIcon.textContent = '✅';\n      dropZone.style.borderColor = finalConfig.successColor;\n      dropZone.style.backgroundColor = 'rgba(16, 185, 129, 0.05)';\n      \n      // Show preview if enabled\n      if (options.showPreview && file.type.startsWith('image/')) {\n        const reader = new FileReader();\n        reader.onload = (e) => {\n          previewArea.innerHTML = `\n            <img src=\"${e.target.result}\" style=\"\n              max-width: 200px;\n              max-height: 150px;\n              border-radius: 6px;\n              object-fit: cover;\n            \"/>\n          `;\n          previewArea.style.display = 'block';\n        };\n        reader.readAsDataURL(file);\n      }\n      \n      if (eventHandlers.onChange) {\n        eventHandlers.onChange(name, file, formState.data);\n      }\n    };\n    \n    // File input change\n    fileInput.addEventListener('change', (e) => {\n      handleFileSelect(e.target.files[0]);\n    });\n    \n    // Drop zone click\n    dropZone.addEventListener('click', () => {\n      fileInput.click();\n    });\n    \n    // Drag and drop\n    if (finalConfig.enableDragDrop) {\n      dropZone.addEventListener('dragover', (e) => {\n        e.preventDefault();\n        dropZone.style.borderColor = finalConfig.inputFocusColor;\n        dropZone.style.backgroundColor = 'rgba(59, 130, 246, 0.05)';\n      });\n      \n      dropZone.addEventListener('dragleave', () => {\n        dropZone.style.borderColor = finalConfig.inputBorderColor;\n        dropZone.style.backgroundColor = finalConfig.inputBackgroundColor;\n      });\n      \n      dropZone.addEventListener('drop', (e) => {\n        e.preventDefault();\n        dropZone.style.borderColor = finalConfig.inputBorderColor;\n        dropZone.style.backgroundColor = finalConfig.inputBackgroundColor;\n        \n        const files = e.dataTransfer.files;\n        if (files.length > 0) {\n          handleFileSelect(files[0]);\n        }\n      });\n    }\n    \n    fieldContainer.appendChild(labelEl);\n    fieldContainer.appendChild(fileInput);\n    fieldContainer.appendChild(dropZone);\n    fieldContainer.appendChild(previewArea);\n    \n    // Help text\n    if (options.helpText) {\n      const helpText = document.createElement('div');\n      helpText.style.cssText = `\n        margin-top: 5px;\n        font-size: ${finalConfig.helpTextFontSize}px;\n        color: ${finalConfig.helpTextColor};\n        font-family: Arial, sans-serif;\n      `;\n      helpText.textContent = options.helpText;\n      fieldContainer.appendChild(helpText);\n    }\n    \n    return fieldContainer;\n  }\n  \n  // Create action buttons\n  function createActionButtons() {\n    const section = document.createElement('div');\n    section.className = 'action-buttons-section';\n    section.style.cssText = `\n      display: flex;\n      gap: 15px;\n      justify-content: flex-end;\n      margin-top: ${finalConfig.sectionSpacing}px;\n      padding-top: ${finalConfig.sectionSpacing}px;\n      border-top: 1px solid ${finalConfig.borderColor};\n    `;\n    \n    // Preview button\n    const previewBtn = document.createElement('button');\n    previewBtn.type = 'button';\n    previewBtn.textContent = '👁️ Preview';\n    previewBtn.style.cssText = `\n      padding: 12px 24px;\n      border: 1px solid ${finalConfig.inputBorderColor};\n      border-radius: 6px;\n      background: ${finalConfig.inputBackgroundColor};\n      color: ${finalConfig.labelColor};\n      font-size: ${finalConfig.inputFontSize}px;\n      font-family: Arial, sans-serif;\n      cursor: pointer;\n      transition: all 0.2s ease;\n    `;\n    \n    previewBtn.addEventListener('mouseenter', () => {\n      previewBtn.style.backgroundColor = '#f3f4f6';\n    });\n    \n    previewBtn.addEventListener('mouseleave', () => {\n      previewBtn.style.backgroundColor = finalConfig.inputBackgroundColor;\n    });\n    \n    previewBtn.addEventListener('click', () => {\n      if (eventHandlers.onPreview) {\n        eventHandlers.onPreview(formState.data, formState.files);\n      }\n    });\n    \n    // Submit button\n    const submitBtn = document.createElement('button');\n    submitBtn.type = 'submit';\n    submitBtn.textContent = '🚀 Publish Blog Post';\n    submitBtn.style.cssText = `\n      padding: 12px 24px;\n      border: none;\n      border-radius: 6px;\n      background: ${finalConfig.buttonColor};\n      color: white;\n      font-size: ${finalConfig.inputFontSize}px;\n      font-family: Arial, sans-serif;\n      font-weight: bold;\n      cursor: pointer;\n      transition: all 0.2s ease;\n    `;\n    \n    submitBtn.addEventListener('mouseenter', () => {\n      submitBtn.style.backgroundColor = finalConfig.buttonHoverColor;\n    });\n    \n    submitBtn.addEventListener('mouseleave', () => {\n      submitBtn.style.backgroundColor = finalConfig.buttonColor;\n    });\n    \n    section.appendChild(previewBtn);\n    section.appendChild(submitBtn);\n    \n    return section;\n  }\n  \n  // Update form visibility based on type\n  function updateFormVisibility() {\n    const hostedSection = container.querySelector('.hosted-content-section');\n    const externalSection = container.querySelector('.external-url-section');\n    \n    if (formState.type === 'hosted') {\n      hostedSection.style.display = 'block';\n      externalSection.style.display = 'none';\n    } else {\n      hostedSection.style.display = 'none';\n      externalSection.style.display = 'block';\n    }\n  }\n  \n  // Validate form\n  function validateForm() {\n    const errors = {};\n    \n    // Basic validation\n    if (!formState.data.title.trim()) {\n      errors.title = 'Title is required';\n    }\n    \n    if (!formState.data.description.trim()) {\n      errors.description = 'Description is required';\n    }\n    \n    if (!formState.data.author.trim()) {\n      errors.author = 'Author is required';\n    }\n    \n    if (formState.type === 'hosted') {\n      if (!formState.files.contentFile) {\n        errors.contentFile = 'Blog content file is required';\n      }\n    } else {\n      if (!formState.data.externalUrl.trim()) {\n        errors.externalUrl = 'External URL is required';\n      }\n    }\n    \n    formState.errors = errors;\n    return Object.keys(errors).length === 0;\n  }\n  \n  // Handle form submission\n  function handleSubmit(e) {\n    e.preventDefault();\n    \n    if (formState.isSubmitting) return;\n    \n    if (!validateForm()) {\n      console.warn('Form validation failed:', formState.errors);\n      return;\n    }\n    \n    formState.isSubmitting = true;\n    \n    if (eventHandlers.onSubmit) {\n      eventHandlers.onSubmit({\n        type: formState.type,\n        data: { ...formState.data },\n        files: { ...formState.files }\n      });\n    }\n    \n    // Reset submitting state after a delay\n    setTimeout(() => {\n      formState.isSubmitting = false;\n    }, 1000);\n  }\n  \n  // Build the form\n  const form = document.createElement('form');\n  form.addEventListener('submit', handleSubmit);\n  \n  // Add all sections\n  form.appendChild(createFormHeader());\n  form.appendChild(createTypeSelector());\n  form.appendChild(createBasicFields());\n  form.appendChild(createHostedContentSection());\n  form.appendChild(createExternalUrlSection());\n  form.appendChild(createActionButtons());\n  \n  container.appendChild(form);\n  \n  // Initialize form visibility\n  updateFormVisibility();\n  \n  // Component interface\n  const blogCreationForm = {\n    element: container,\n    \n    // Event handlers\n    onSubmit(handler) {\n      eventHandlers.onSubmit = handler;\n    },\n    \n    onPreview(handler) {\n      eventHandlers.onPreview = handler;\n    },\n    \n    onChange(handler) {\n      eventHandlers.onChange = handler;\n    },\n    \n    onTypeChange(handler) {\n      eventHandlers.onTypeChange = handler;\n    },\n    \n    // Data access\n    getData() {\n      return {\n        type: formState.type,\n        data: { ...formState.data },\n        files: { ...formState.files }\n      };\n    },\n    \n    setData(data) {\n      Object.assign(formState.data, data);\n      // Update form fields with new data\n      Object.entries(data).forEach(([key, value]) => {\n        const input = container.querySelector(`[name=\"${key}\"]`);\n        if (input) {\n          input.value = value;\n        }\n      });\n    },\n    \n    // Validation\n    validate() {\n      return validateForm();\n    },\n    \n    getErrors() {\n      return { ...formState.errors };\n    },\n    \n    // State\n    reset() {\n      formState.data = {\n        title: '',\n        description: '',\n        author: '',\n        publishDate: new Date().toISOString().split('T')[0],\n        price: null,\n        previewImage: null,\n        contentFile: null,\n        externalUrl: '',\n        tags: []\n      };\n      formState.files = {\n        previewImage: null,\n        contentFile: null\n      };\n      formState.errors = {};\n      \n      // Reset form elements\n      form.reset();\n    },\n    \n    setSubmitting(isSubmitting) {\n      formState.isSubmitting = isSubmitting;\n      const submitBtn = container.querySelector('button[type=\"submit\"]');\n      if (submitBtn) {\n        submitBtn.disabled = isSubmitting;\n        submitBtn.textContent = isSubmitting ? '⏳ Publishing...' : '🚀 Publish Blog Post';\n      }\n    }\n  };\n  \n  return blogCreationForm;\n}\n\n/**\n * Export default configuration\n */\nexport { DEFAULT_BLOG_FORM_CONFIG as blogCreationFormDefaults };